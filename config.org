#+STARTUP: overview
#+title:My emacs config
#+author:zawy
[[/img/config.png]]

* Basic interface settings

**** Remove the default startup screen
     #+BEGIN_SRC emacs-lisp
       (setq inhibit-startup-message t)
     #+END_SRC

**** Remove the gui
     #+BEGIN_SRC emacs-lisp
       (scroll-bar-mode -1)        ; Disable visible scrollbar
       (tool-bar-mode -1)          ; Disable the toolbar
       (tooltip-mode -1)           ; Disable tooltips
       (set-fringe-mode 10)        ; Give some breathing room
       (menu-bar-mode -1)          ; Disable the menu bar
     #+END_SRC

**** Disable screen flashing top/bottom line
     #+BEGIN_SRC emacs-lisp
       (setq visible-bell nil)
     #+END_SRC

**** Change the default font and theme
     #+BEGIN_SRC emacs-lisp
       (set-face-attribute 'default nil :font "Terminus-15:weight=bold")
       (set-foreground-color "white")
       (set-background-color "#161616")
       (set-face-foreground 'vertical-border "#333333")
       (set-face-foreground 'mode-line "#88DDDD")
       (set-face-background 'mode-line "#333333")
       (set-face-foreground 'mode-line-inactive "#595959")
       (set-face-background 'mode-line-inactive "black")
       (set-face-foreground 'font-lock-comment-face "#808080")
       (custom-set-faces
	'(mode-line ((t (:box (:line-width 1 :color "#333333"))))))
       (custom-set-faces
	'(mode-line-inactive ((t (:box (:line-width 1 :color "#333333"))))))
       ;;  (load-theme 'spacemacs-dark t)
     #+END_SRC

**** Disable line-wrapping
     #+BEGIN_SRC emacs-lisp
       (set-default 'truncate-lines t)
     #+END_SRC

**** Enable line numbers
     #+BEGIN_SRC emacs-lisp
       (column-number-mode)
       (global-display-line-numbers-mode t)
       ;; Disable line numbers for some modes
       (dolist (mode '(org-mode-hook
		       term-mode-hook
		       shell-mode-hook
		       eshell-mode-hook))
	 (add-hook mode (lambda () (display-line-numbers-mode 0))))
     #+END_SRC


* Variables

**** Use .custom.el for custom-set-variables
     #+BEGIN_SRC emacs-lisp
       (setq custom-file "~/.emacs.d/custom.el")
       (load custom-file)
     #+END_SRC

**** Move backups to ~/.trash
     #+BEGIN_SRC emacs-lisp
       (setq backup-directory-alist '((".*" . "~/.trash")))
     #+END_SRC


* Packages

**** Initialize the package repositories
     #+BEGIN_SRC emacs-lisp
       ;; Initialize package manager
       (require 'package)
       (setq package-archives '(("melpa" . "https://melpa.org/packages/")
				("org" . "https://orgmode.org/elpa/")
				("elpa" . "https://elpa.gnu.org/packages/")))
       (package-initialize)
       (unless package-archive-contents
	 (package-refresh-contents))
       ;; Initialize use-package on non-Linux platforms
       (unless (package-installed-p 'use-package)
	 (package-install 'use-package))
       (require 'use-package)
       (setq use-package-always-ensure t)
     #+END_SRC


**** Page Break lines
     #+BEGIN_SRC emacs-lisp
       (use-package page-break-lines)
       (page-break-lines-mode 1)
     #+END_SRC

**** LSP Python hook
     #+BEGIN_SRC emacs-lisp
       (add-hook 'python-mode-hook 'lsp)
       (add-hook 'c-mode-hook 'lsp)
     #+END_SRC

**** Set up ivy and counsel
     #+BEGIN_SRC emacs-lisp
       (use-package ivy
	 :diminish
	 :bind (("C-s" . swiper)
		:map ivy-minibuffer-map
		("TAB" . ivy-alt-done)
		("C-l" . ivy-alt-done)
		("C-j" . ivy-next-line)
		("C-k" . ivy-previous-line)
		:map ivy-switch-buffer-map
		("C-k" . ivy-previous-line)
		("C-l" . ivy-done)
		("C-d" . ivy-switch-buffer-kill)
		:map ivy-reverse-i-search-map
		("C-k" . ivy-previous-line)
		("C-d" . ivy-reverse-i-search-kill))
	 :config
	 (ivy-mode 1))
       (use-package counsel
	 :bind (("M-x" . counsel-M-x)
		("C-x b" . counsel-switch-buffer)
		("C-x C-f" . counsel-find-file))
	 :config
	 (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
       ;; Open file as root
       (defun sufind ()
	 (interactive)
	 (counsel-find-file "/su::/"))
     #+END_SRC

**** Set up leader prefix and commands using keybinds included in zoey/leader-keys
     #+BEGIN_SRC emacs-lisp
       (use-package general
	 :config
	 (general-create-definer zoey/leader-keys
	   :keymaps '(normal insert visual emacs)
	   :prefix "SPC"
	   :global-prefix "C-SPC"))
     #+END_SRC


**** Customize modeline and provide icon fonts
     #+BEGIN_SRC emacs-lisp
       (use-package all-the-icons)
       (use-package doom-modeline
	 :init (doom-modeline-mode 1)
	 :custom ((doom-modeline-height 15)))
     #+END_SRC

**** Latex preview pane
     #+BEGIN_SRC emacs-lisp
        (latex-preview-pane-enable)
     #+END_SRC
**** Package that makes creating themes easier
     #+BEGIN_SRC emacs-lisp
       (use-package autothemer)
     #+END_SRC

**** Highlight hex, string colors etc.
     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-mode
	 :hook (prog-mode . rainbow-mode ))
     #+END_SRC

**** C-x C-h Leader etc... command helper
     #+BEGIN_SRC emacs-lisp
       (use-package which-key
	 :init (which-key-mode)
	 :diminish which-key-mode
	 :config
	 (setq which-key-idle-delay 0))
     #+END_SRC

**** M-x command description
     #+BEGIN_SRC emacs-lisp
       (use-package ivy-rich
	 :init
	 (ivy-rich-mode 1))
     #+END_SRC

**** Colour the same brackets/parantheses
     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
	 :hook (prog-mode . rainbow-delimiters-mode))
     #+END_SRC

**** Emojis
     #+BEGIN_SRC emacs-lisp
       (use-package emojify)
       (add-hook 'after-init-hook #'global-emojify-mode)
     #+END_SRC

**** Zen mode
     #+BEGIN_SRC emacs-lisp
       (load-file "~/.emacs.d/zen-mode.el")
       (require 'zen-mode)
     #+END_SRC

**** Manage projects
     #+BEGIN_SRC emacs-lisp
       (use-package projectile
	 :config
	 (projectile-mode +1))
     #+END_SRC

**** Customize dashboard
     #+BEGIN_SRC emacs-lisp
       (use-package dashboard
	 :diminish dashboard-mode
	 :config
	 (setq dashboard-banner-logo-title "你好 佐伊")
	 (setq dashboard-startup-banner "~/.emacs.d/img/nichijou.png")
	 (setq dashboard-center-content t)
	 (setq dashboard-show-shortcuts t)
	 (setq dashboard-set-heading-icons t)
	 (setq dashboard-set-file-icons t)
	 (setq dashboard-projects-backend 'projectile)
	 (setq dashboard-items '((projects . 5)
				 (bookmarks . 5)
				 (recents . 5)))
	 (setq dashboard-set-init-info t)
	 (setq dashboard-projects-switch-function 'projectile-switch-project)
	 (dashboard-setup-startup-hook))
     #+END_SRC

**** Better help interface
     #+BEGIN_SRC emacs-lisp
       (use-package helpful
	 :custom
	 (counsel-describe-function-function #'helpful-callable)
	 (counsel-describe-variable-function #'helpful-variable)
	 :bind
	 ([remap describe-function] . counsel-describe-function)
	 ([remap describe-command] . helpful-command)
	 ([remap describe-variable] . counsel-describe-variable)
	 ([remap describe-key] . helpful-key))
     #+END_SRC

**** Set up evil mode
     #+BEGIN_SRC emacs-lisp
       (use-package evil
	 :init
	 (setq evil-want-integration t)
	 (setq evil-want-keybinding nil)
	 (setq evil-want-C-u-scroll t)
	 (setq evil-want-C-i-jump nil)
	 (setq evil-ex-substitute-global t)
	 :config
	 (evil-mode 1)
	 (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	 (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
	 ;; Use visual line motions even outside of visual-line-mode buffers
	 (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	 (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
	 ;;
	 (evil-set-initial-state 'messages-buffer-mode 'normal)
	 (evil-set-initial-state 'dashboard-mode 'normal)
	 ;; Vim-like history and redo
	 (global-undo-tree-mode)
	 (evil-set-undo-system 'undo-tree)
	 ;; Remap Z-Q to force quit
	 (define-key evil-normal-state-map (kbd "ZQ") 'evil-quit-all-with-error-code))
       (require 'goto-chg)
       (global-set-key [(control ?.)] 'goto-last-change)
       (global-set-key [(control ?,)] 'goto-last-change-reverse)
       ;; Disable evil in certain modes
       (use-package evil-collection
	 :after evil
	 :config
	 (evil-collection-init))
     #+END_SRC

**** Tie related commands into a family of short bindings with a common prefix
     #+BEGIN_SRC emacs-lisp
       (use-package hydra)
       (defhydra hydra-move-window (:timeout 4)
	 "move window"
	 ("h" evil-window-decrease-width "left")
	 ("l" evil-window-increase-width "right")
	 ("q" nil "quit" :exit t))
     #+END_SRC


* Keybinds

**** Make ESC quit prompts
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
     #+END_SRC

**** Ex-mode search body needed in leader functions (see next step)
     #+BEGIN_SRC emacs-lisp
       (defun subs ()
	 (interactive)
	 (evil-ex "%s//"))
     #+END_SRC

**** Leader key functions
     #+BEGIN_SRC emacs-lisp
	    (zoey/leader-keys
	      "b"   '(:ignore t :which-key "buffer")
	      "bk"  '(:ignore t :which-key "kill buffer")
	      "f"   '(:ignore t :which-key "file")
	      "h"   '(:ignore t :which-key "help")
	      "t"   '(:ignore t :which-key "toggles")
	      "s"   '(:ignore t :which-key "substitute")
	      "m"   '(menu-set-font :which-key "font menu")
	      "e"   '(xref-find-definitions :which-key "jump to def")
	      "q"   '(xref-pop-marker-stack :which-key "go back")
	      "tt"  '(counsel-load-theme :which-key "choose theme")
	      "te"  '(global-emojify-mode :which-key "toggle emojis")
	      "tm"  '(hydra-move-window/body :which-key "move window")
	      "tr"  '(rainbow-mode :which-key "rainbow mode")
	      "tz"  '(zen-mode :which-key "toggle zen-mode")
	      "hf"  '(describe-function :which-key "describe function")
	      "hk"  '(describe-key :which-key "describe key")
	      "hp"  '(describe-package :which-key "describe package")
	      "fn"  '(make-empty-file :which-key "create file")
	      "fe"  '(counsel-find-file :which-key "edit file")
	      "fr"  '(sufind :which-key "open as root")
	      "sa"  '(subs :which-key "substitute all occurences")
	      "sq"  '(query-replace :which-key "substitute query")
	      "be"  '(eval-buffer :which-key "eval buffer")
	      "br"  '(revert-buffer :which-key "revert buffer")
	      "bs"  '(counsel-switch-buffer :which-key "switch buffer")
	      "bw"  '(save-buffer :which-key "buffer write")
	      "bkc" '(kill-current-buffer :which-key "kill current buffer")
	      "bks" '(kill-buffer :which-key "kill a buffer"))

     #+END_SRC
     
